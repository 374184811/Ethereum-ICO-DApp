有7年工作经验，主要侧重前端开发，设计到前端框架angular，react，node，目前在hw3y，主要参与云产品，隐私号码保护，短信验证码
台运营资金管理平台。担任特性负责人,承担全流程软件管理，研发过程，开发流程、系统架构、技术方案等工作经历。日常组织和推动
团队项目交付进度和前沿技术研究及经验分享 区块链 前端新框架升级和优化，以及协调跨团队的合作项目。
=============
箭头函数区别
作用域安全，this一般全局对象，被普通函数包含指向上一层
没有argument，以访问外围函数的 arguments 对象；没有new
=====================

部门在 XXG 以至公司的定位，相比于公司其他方向的部门，部门的特点是
部门对公司或对行业最大的贡献是
啥产品 团队的业务 迭代
部门结构 设计师、产品、研发
=======================================
浏览请求过程
1.DNS解析 拿到IP 2.ip TCP  3.http 请求
4.服务器相应http， 浏览器得到html代码
5.浏览器解析 6.渲染7.关闭tcp
===============
解析：dom tree +css om=》render tree《=》layout tree 
=》painting，display
可用Preformance API时：白屏时间 = firstPaint(<head>尾端window.firstPaint = Date.now()) 
- performance.timing.navigationStart
不可用Preformance API时：白屏时间 = firstPaint - pageStartTime
==========================================================
CDN 原理：
1.本地DNS解析CNAME 指向cdn DNS服务器 2.该服务器返回cdn 负载均衡Ip
3. cdn 负载均衡根据用户Ip，url，返给用户所属区域负载均衡
4.区域负载均衡根据IP，url，负载情况，服务器ip
5.用户请求这个ip，如果没有资源，向上一层缓存服务器，直到源服务器
==============================================
第一次握手：S只可以确认 自己可以接受C//syn=1
第二次握手：C可以确认 S收到；自己可以接受S//syn=1,ack
第三次握手：S可以确认 C收到了自己发送//ack
==================================
Vuex和Redux的区别
从实现原理上来说，最大的区别是两点：Redux使用的是不可变数据，而Vuex的数据是可变的，因此，Redux每次都是用新state替换旧state，而Vuex是直接修改。Redux在检测数据变化的时候，是通过diff的方式比较差异的，而Vuex其实和Vue的原理一样，是通过getter/setter来比较的，这两点的区别，也是因为React和Vue的设计理念不同。React更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用React，小型项目用Vue的感觉
===========================
interface vs type
定义类型范围:interface只能定义对象类型。而type声明可以声明任何类型，包括基础类型、联合类型或交叉类型
扩展性:接口可以extends、implements,从而扩展多个接口或类。类型没有扩展功能
合并声明:定义两个相同名称的接口会合并声明。定义两个同名的type会出现异常
===================================
proxy 和 defineProperty 的区别
definedProperty 是劫持对象的属性，不能监听属性的添加和删除，新增元素需要再次 definedProperty
Proxy 劫持的是整个对象，不需要做特殊处理
使用 defineProperty 时，我们修改原来的 obj 对象就可以触发拦截，而使用 Proxy，就必须修改代理对象，即 Proxy 的实例才可以触发拦截
使用 defineProperty 需要遍历对象的每一个属性，对于性能会有一定的影响
Proxy 可以对数组基于下标的修改的检测，长度修改的监测，而且对 Map、Set、WeakMap 和 WeakSet 的支持
=====================================
ES5与ES6继承
1.ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.apply(this)）.
2.ES6的继承机制完全不同，实质上是先创建父类的实例对象this（所以必须先调用父类的super()方法），然后再用子类的构造函数修改this。
3.ES5的继承时通过原型或构造函数机制来实现。
4.ES6通过class关键字定义类，里面有构造方法，类之间通过extends关键字实现继承。子类必须在constructor方法中调用super方法，否则新建实例报错。
因为子类没有自己的this对象，而是继承了父类的this对象，然后对其进行加工。如果不调用super方法，子类得不到this对象。
=======================================
垂直居中的方法
(1)margin:auto 法
css: div{
width: 400px;
height: 400px;
position: relative;
border: 1px solid #465468;
}
img{
position: absolute;
margin: auto;
top: 0;
left: 0;
right: 0;
bottom: 0;
}
(2)margin 负值法
.container{
width: 500px;
height: 400px;
border: 2px solid #379;
position: relative;
}
.inner{
width: 480px;
height: 380px;
background-color: #746;
position: absolute;
top: 50%;
left: 50%;
margin-top: -190px; /*height 的一半*/
margin-left: -240px; /*width 的一半*/
}
(3)transform。子 position: absolute; left: 50%; top: 50%;transform: translate(-50%,-50%)
(4)利用 flex
将父元素设置为 display:flex，并且设置 align-items:center;justify-content:center;
=================
选择器的优先级
总结排序：!important > style行内样式 > ID选择器 > 类选择器 > 元素 > 通配符 > 继承 > 浏览器默认属性
========================
viewport
<meta name="viewport" content="width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5"/>
transform: scale(0.5,0.5);
=======================
三栏布局：
1、使用 float+margin：
给 div 设置 float：left，left 的 div 添加属性 margin-right：left 和 center 的间隔 px,right 的
div 添加属性 margin-left：left 和 center 的宽度之和加上间隔
2、使用 float+overflow：
给 div 设置 float：left，再给 right 的 div 设置 overflow:hidden。这样子两个盒子浮动，另
一个盒子触发 bfc 达到自适应
3、使用 position：
父级 div 设置 position：relative，三个子级 div 设置 position：absolute，这个要计算好盒
子的宽度和间隔去设置位置，兼容性比较好，
4、使用 table 实现：
父级 div 设置 display：table，设置 border-spacing：10px//设置间距，取值随意,子级 div
设置 display:table-cell，这种方法兼容性好，适用于高度宽度未知的情况，但是 margin
失效，设计间隔比较麻烦，
5、flex 实现：
parent 的 div 设置 display：flex；left 和 center 的 div 设置 margin-right；然后 right 的 div
设置 flex：1；这样子 right 自适应，但是 flex 的兼容性不好
6、grid 实现：
parent 的 div 设置 display：grid，设置 grid-template-columns 属性，固定第一列第二列宽
度，第三列 auto，
对于两侧定宽中间自适应的布局，对于这种布局需要把 center 放在前面，可以采用双飞
翼布局：圣杯布局，来实现，也可以使用上述方法中的 grid，table，flex，position 实现
============================
基本数据类型：undefined、null、number、boolean、string、symbol
=================
强缓存
expires 绝对时间，时间不同步 cache-control 相对时间
loccation{add_header cache-control max-age=60}
协商 中304
last modify、ifmodifysince时间精度不够，一秒内改没差距、etag、if-None-Match
=======================================
XSS（跨站脚本攻击）客户端注入脚本窃取用户
反射：多余数据返回；存储：数据库存了敏感性； dom改页面
解决：输入过滤，输出页面转义；尖括号、斜杠 cookie加httponly 锁死cookie
csrf：盗用了用户的身份，以用户的名义发送了恶意请求
验证http请求头 refer字段；请求地址中token；验证码
=====================
iframe 跨域：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。
location.hash + iframe 跨域：a 欲与 b 跨域相互通信，通过中间页 c 来实现。 三个页面，
不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。
window.name + iframe跨域：通过iframe的src属性由外域转向本地域，跨域数据即由iframe
的 window.name 从外域传递到本地域。
postMessage 跨域：可以跨域操作的 window 属性之一。
CORS：服务端设置 Access-Control-Allow-Origin 即可，前端无须设置，若要带 cookie 请
求，前后端都需要设置。
node接口加请求头，res.header(Access-Control-Allow-Origin,“*”)
代理跨域：启一个代理服务器，实现数据的转发：location /{proxy_pass http://...}
webpack.config：proxy target
=========================
（1）什么是闭包：
闭包是指有权访问另外一个函数作用域中的变量的函数。
闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。闭包就是
就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈
上分配而是在堆上分配。当在一个函数内定义另外一个函数就会产生闭包。
（2）为什么要用：保存外部函数的变量。3、封装私有变量
匿名自执行函数：我们知道所有的变量，如果不加上 var 关键字，则默认的会添加到全
局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如：别的函数可能误
用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链
上遍历的)。除了每次使用变量都是用 var 关键字外，我们在实际情况下经常遇到这样一
种情况，即有的函数只需要执行一次，其内部变量无需维护，可以用闭包。
结果缓存：我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，
每次调用都会花费很长时间，那么我们就需要将计算出来的值存储起来，当调用这个函
数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如
果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部
的引用，从而函数内部的值可以得以保留。
封装：实现类和继承等
==========================
BFC 一个独立的渲染区域，这个区域的子元素不会影响到外面的元素，解决margin 重合 塌陷 高度坍塌
position 为 absolute 或 fixed 的元素；overflow 不为 visible；float：left，right
display 为 非none，非block，非inline；inline-block，table-cell，table-caption，flex，inline-flex，grid
========================
固定定位 fixed：
元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定
位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。
相对定位 relative：
如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直
或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是
否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。
绝对定位 absolute：
绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那
么它的位置相对于<html>。absolute 定位使元素的位置与文档流无关，因此不占据空间。
absolute 定位的元素和其他元素重叠。
粘性定位 sticky：
想要获取更多前端开发相关学习资料，请加微信1124692领取>>>>>>
元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing
block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定
位，之后为固定定位。
默认定位 Static：
默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声
明）。
inherit: 规定应该从父元素继承 position 属性的
==================
强缓存相关字段有 expires，cache-control。如果 cache-control 与 expires 同时存在的话，
cache-control 的优先级高于 expires。
协商缓存相关字段有 Last-Modified/If-Modified-Since，Etag/If-None-Match、 304
===================
事件委托以及冒泡原理。
事件委托是利用冒泡阶段的运行机制来实现的，就是把一个元素响应事件的函数委托到
另一个元素，一般是把一组元素的事件委托到他的父元素上，委托的优点是
减少内存消耗，节约效率
动态绑定事件
事件冒泡，就是元素自身的事件被触发后，如果父元素有相同的事件，如 onclick 事件，
那么元素本身的触发状态就会传递，也就是冒到父元素，父元素的相同事件也会一级一
级根据嵌套关系向外触发，直到 document/window，冒泡过程结
========================
 AngularJS 双向绑定原理
参考回答：
Angular 将双向绑定转换为一堆 watch 表达式，然后递归这些表达式检查是否发生过变化，
如果变了则执行相应的 watcher 函数（指 view 上的指令，如 ng-bind，ng-show 等或是{{}}）。
等到 model 中的值不再发生变化，也就不会再有 watcher 被触发，一个完整的 digest 循环
就完成了。
Angular 中在 view 上声明的事件指令，如：ng-click、ng-change 等，会将浏览器的事件
转发给$scope 上相应的 model 的响应函数。等待相应函数改变 model，紧接着触发脏检
查机制刷新 view。
watch 表达式：可以是一个函数、可以是$scope 上的一个属性名，也可以是一个字符串
形式的表达式。$watch 函数所监听的对象叫做 watch 表达式。watcher 函数：指在 view
上的指令（ngBind，ngShow、ngHide 等）以及{{}}表达式，他们所注册的函数。每一个
watcher 对象都包括：监听函数，上次变化的值，获取监听表达式的方法以及监听表达
式，最后还包括是否需要使用深度对比（angular.equals()
================
Vue 的生命周期
Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载
Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是 Vue 的生命周期。通俗说就
是 Vue 实例从创建到销毁的过程，就是生命周期。
每一个组件或者实例都会经历一个完整的生命周期，总共分为三个阶段：初始化、运行
中、销毁。
实例、组件通过 new Vue() 创建出来之后会初始化事件和生命周期，然后就会执行
beforeCreate 钩子函数，这个时候，数据还没有挂载呢，只是一个空壳，无法访问到数据
和真实的 dom，一般不做操作
挂载数据，绑定事件等等，然后执行 created 函数，这个时候已经可以使用到数据，也
可以更改数据,在这里更改数据不会触发 updated 函数，在这里可以在渲染前倒数第二次
更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取
接下来开始找实例或者组件对应的模板，编译模板为虚拟 dom 放入到 render 函数中准备
渲染，然后执行 beforeMount 钩子函数，在这个函数中虚拟 dom 已经创建完成，马上就
要渲染,在这里也可以更改数据，不会触发 updated，在这里可以在渲染前最后一次更改
数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取
接下来开始 render，渲染出真实 dom，然后执行 mounted 钩子函数，此时，组件已经出
现在页面中，数据、真实 dom 都已经处理好了,事件都已经挂载好了，可以在这里操作
真实 dom 等事情... 当组件或实例的数据更改之后，会立即执行 beforeUpdate，然后 Vue 的虚拟 dom 机制会
重新构建虚拟 dom 与上一次的虚拟 dom 树利用 diff 算法进行对比之后重新渲染，一般不
做什么事儿
当更新完成后，执行 updated，数据已经更改完成，dom 也重新 render 完成，可以操作
更新后的虚拟 dom
当经过某种途径调用$destroy 方法后，立即执行 beforeDestroy，一般在这里做一些善后工
作，例如清除计时器、清除非指令绑定的事件等等
组件的数据绑定、监听...去掉后只剩下 dom 空壳，这个时候，执行 destroyed，在这里做
善后工作也可以
===========
Vue 的优缺点
优点：
1、数据驱动视图，对真实 dom 进行抽象出 virtual dom（本质就是一个 js 对象），
并配合 diff 算法、响应式和观察者、异步队列等手段以最小代价更新 dom，渲染
页面
2、组件化，组件用单文件的形式进行代码的组织编写，使得我们可以在一个文
件里编写 html\css（scoped 属性配置 css 隔离）\js 并且配合 Vue-loader 之后，支
持更强大的预处理器等功能
3、强大且丰富的 API 提供一系列的 api 能满足业务开发中各类需求
4、由于采用虚拟 dom，让 Vue ssr 先天就足
5、生命周期钩子函数，选项式的代码组织方式，写熟了还是蛮顺畅的，但仍然
有优化空间（Vue3 composition-api）
6、生态好，社区活跃
缺点：
1、由于底层基于 Object.defineProperty 实现响应式，而这个 api 本身不支持 IE8
及以下浏览器
2、csr 的先天不足，首屏性能问题（白屏）
3、由于百度等搜索引擎爬虫无法爬取 js 中的内容，故 spa 先天就对 seo 优化心
有余力不足（谷歌的 puppeteer 就挺牛逼的，实现预渲染底层也是用到了这个工
具
===================
Vue 和 React 有什么不同？使用场景分别是什么？
1、Vue 是完整一套由官方维护的框架，核心库主要有由尤雨溪大神独自维护，而 React
是不要脸的书维护（很多库由社区维护），曾经一段时间很多人质疑 Vue 的后续维护性，
似乎这并不是问题。
2、Vue 上手简单，进阶式框架，白话说你可以学一点，就可以在你项目中去用一点，
你不一定需要一次性学习整个 Vue 才能去使用它，而 React，恐怕如果你这样会面对项
目束手无策。
3、语法上 Vue 并不限制你必须 es6+完全 js 形式编写页面，可以视图和 js 逻辑尽可能分
离，减少很多人看不惯 React-jsx 的恶心嵌套，毕竟都是作为前端开发者，还是更习惯
于 html 干净。
4、很多人说 React 适合大型项目，适合什么什么，Vue 轻量级，适合移动端中小型项目，
其实我想说，说这话的人是心里根本没点逼数，Vue 完全可以应对复杂的大型应用，甚
至于说如果你 React 学的不是很好，写出来的东西或根本不如 Vue 写的，毕竟 Vue 跟着
官方文档撸就行，自有人帮你规范，而 React 比较懒散自由，可以自由发挥
5、Vue 在国内人气明显胜过 React，这很大程度上得益于它的很多语法包括编程思维更
符合国人思想
=============
Vue 双向绑定原理
参考回答：
Vue 数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。利用了
Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)。
===============
